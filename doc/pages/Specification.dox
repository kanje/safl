/*
 * This file is a part of Stand-alone Future Library (safl).
 */

/**
 * @page Specs The Specification
 * @tableofcontents
 *
 * This is the SAFL specification. It defines the concepts, describes the provided
 * functionality and specifies the expected behaviour. This is @b not a tutorial
 *
 * @note
 * If the implementation does not behave as specified by this document, it is
 * considered a bug in the implementation and must be fixed.
 *
 * @section spec_FuturesPromises Futures and Promises
 * <ol>
 * <li> @safl{Future} represents a @e future @e result of an asynchronous operation,
 * while @safl{Promise} represents a @e promise to provide such result.
 *
 * <li> @c Future and @c Promise objects are not copyable, but movable.
 *
 * <li> When the result is available, @c Promise is considered to be @e fulfilled
 * and @c Future -- @e ready. @safl{Future::isReady()} can be used to check this.
 *
 * <li> The result can be either a @e value of a specified type or an @e error
 * (see @ref spec_Errors).
 *
 * <li> A template argument to @c Future<T> and @c Promise<T> specify the value
 * type. @c T, if not @c void, must be fully defined and have a public destructor.
 *
 * <li> If @c Promise is destroyed before it is fulfilled, an error of type
 * @safl{BrokenPromise} is set.
 * </ol>
 *
 * @section spec_Chains Chains of Operations
 * @section spec_Errors Error Handling
 * @section spec_Control Controlling Mechanism
 */
